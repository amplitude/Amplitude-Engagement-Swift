// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target arm64-apple-ios15.6 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name AmplitudeEngagementSwift
import AVKit
import AmplitudeCore
import CoreGraphics
import CoreText
import DeveloperToolsSupport
import Foundation
import Foundation/*.Bundle*/
import Foundation/*.ProcessInfo*/
import Foundation/*.URL*/
import SafariServices
import Security
import Swift
import SwiftUI
import SwiftUICore
import UIKit
import WebKit
import _AVKit_SwiftUI
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum AmplitudeEngagementError : Swift.Error {
  case networkRequestFailed(Swift.String)
  case httpError(Swift.Int)
  case dataConversionFailed
  case jsExecutionFailed(Swift.String)
  case jsError(Swift.String)
  case handlerNotFound(Swift.String)
  case invalidParameters(Swift.String)
  case nudgeRenderingFailed(Swift.String)
  case unknown(Swift.String)
}
@_hasMissingDesignatedInitializers open class BaseEvent : AmplitudeCore.AnalyticsEvent, Swift.Codable {
  public var eventProperties: [Swift.String : Any]?
  public var userId: Swift.String?
  public var deviceId: Swift.String?
  public var timestamp: Swift.Int64?
  public var sessionId: Swift.Int64?
  public var eventType: Swift.String
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder)
  @objc deinit
}
public struct JSON : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public enum ThemeMode : Swift.String {
  case auto
  case dark
  case light
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ContentBlockType : Swift.String, Swift.Codable {
  case markdown
  case image
  case video
  case button
  case survey_text
  case survey_text_short
  case survey_rating
  case survey_list
  case unknown
  public init(from decoder: any Swift.Decoder) throws
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public class AnyContentBlockMeta : Swift.Codable, Swift.Hashable {
  public init()
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: AmplitudeEngagementSwift.AnyContentBlockMeta, rhs: AmplitudeEngagementSwift.AnyContentBlockMeta) -> Swift.Bool
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  required public init(from decoder: any Swift.Decoder) throws
}
public class MarkdownMeta : AmplitudeEngagementSwift.AnyContentBlockMeta {
  final public let value: Swift.String
  public init(value: Swift.String)
  required public init(from decoder: any Swift.Decoder) throws
  override public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: AmplitudeEngagementSwift.MarkdownMeta, rhs: AmplitudeEngagementSwift.MarkdownMeta) -> Swift.Bool
  @objc deinit
}
public class ImageMeta : AmplitudeEngagementSwift.AnyContentBlockMeta {
  final public let src: Swift.String
  final public let filename: Swift.String?
  final public let size: Swift.String?
  public init(src: Swift.String, filename: Swift.String? = nil, size: Swift.String? = nil)
  required public init(from decoder: any Swift.Decoder) throws
  override public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: AmplitudeEngagementSwift.ImageMeta, rhs: AmplitudeEngagementSwift.ImageMeta) -> Swift.Bool
  @objc deinit
}
public class VideoMeta : AmplitudeEngagementSwift.AnyContentBlockMeta {
  final public let src: Swift.String
  public init(src: Swift.String)
  required public init(from decoder: any Swift.Decoder) throws
  override public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: AmplitudeEngagementSwift.VideoMeta, rhs: AmplitudeEngagementSwift.VideoMeta) -> Swift.Bool
  @objc deinit
}
public enum ButtonType : Swift.String, Swift.Codable {
  case primary
  case secondary
  case tertiary
  case snooze
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public class ButtonMeta : AmplitudeEngagementSwift.AnyContentBlockMeta {
  final public let label: Swift.String?
  final public let action: AmplitudeEngagementSwift.Action?
  final public let buttonType: AmplitudeEngagementSwift.ButtonType?
  public init(label: Swift.String? = nil, action: AmplitudeEngagementSwift.Action? = nil, buttonType: AmplitudeEngagementSwift.ButtonType? = nil)
  required public init(from decoder: any Swift.Decoder) throws
  override public func encode(to encoder: any Swift.Encoder) throws
  override public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: AmplitudeEngagementSwift.ButtonMeta, rhs: AmplitudeEngagementSwift.ButtonMeta) -> Swift.Bool
  @objc deinit
}
public class SurveyTextMeta : AmplitudeEngagementSwift.AnyContentBlockMeta {
  final public let prompt: Swift.String
  final public let validation: AmplitudeEngagementSwift.SurveyValidation.ValidationConfig?
  public init(prompt: Swift.String, validation: AmplitudeEngagementSwift.SurveyValidation.ValidationConfig? = nil)
  required public init(from decoder: any Swift.Decoder) throws
  override public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: AmplitudeEngagementSwift.SurveyTextMeta, rhs: AmplitudeEngagementSwift.SurveyTextMeta) -> Swift.Bool
  @objc deinit
}
public class SurveyListMeta : AmplitudeEngagementSwift.AnyContentBlockMeta {
  final public let options: [Swift.String]
  final public let listType: Swift.String
  final public let displayType: Swift.String
  final public let validation: AmplitudeEngagementSwift.SurveyValidation.ValidationConfig?
  final public let conditionalActions: [AmplitudeEngagementSwift.NudgeConditionalAction]?
  final public let defaultAction: AmplitudeEngagementSwift.Action?
  public init(options: [Swift.String], listType: Swift.String, displayType: Swift.String, validation: AmplitudeEngagementSwift.SurveyValidation.ValidationConfig? = nil, conditionalActions: [AmplitudeEngagementSwift.NudgeConditionalAction]? = nil, defaultAction: AmplitudeEngagementSwift.Action? = nil)
  required public init(from decoder: any Swift.Decoder) throws
  override public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: AmplitudeEngagementSwift.SurveyListMeta, rhs: AmplitudeEngagementSwift.SurveyListMeta) -> Swift.Bool
  @objc deinit
}
public class SurveyRatingMeta : AmplitudeEngagementSwift.AnyContentBlockMeta {
  final public let type: AmplitudeEngagementSwift.SurveyRatingType
  final public let lowerLabel: Swift.String
  final public let upperLabel: Swift.String
  final public let options: Swift.Int
  final public let emojis: [Swift.String]?
  final public let validation: AmplitudeEngagementSwift.SurveyValidation.ValidationConfig?
  final public let conditionalActions: [AmplitudeEngagementSwift.NudgeConditionalAction]?
  final public let defaultAction: AmplitudeEngagementSwift.Action?
  public init(type: AmplitudeEngagementSwift.SurveyRatingType, lowerLabel: Swift.String, upperLabel: Swift.String, options: Swift.Int, emojis: [Swift.String]? = nil, validation: AmplitudeEngagementSwift.SurveyValidation.ValidationConfig? = nil, conditionalActions: [AmplitudeEngagementSwift.NudgeConditionalAction]? = nil, defaultAction: AmplitudeEngagementSwift.Action? = nil)
  required public init(from decoder: any Swift.Decoder) throws
  override public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: AmplitudeEngagementSwift.SurveyRatingMeta, rhs: AmplitudeEngagementSwift.SurveyRatingMeta) -> Swift.Bool
  @objc deinit
}
public protocol ContentBlockProtocol : Swift.Decodable, Swift.Encodable, Swift.Hashable, Swift.Identifiable {
  var type: AmplitudeEngagementSwift.ContentBlockType { get }
}
public class MarkdownBlock : AmplitudeEngagementSwift.ContentBlockProtocol {
  public var type: AmplitudeEngagementSwift.ContentBlockType
  final public let meta: AmplitudeEngagementSwift.MarkdownMeta
  public init(meta: AmplitudeEngagementSwift.MarkdownMeta)
  required public init(from decoder: any Swift.Decoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: AmplitudeEngagementSwift.MarkdownBlock, rhs: AmplitudeEngagementSwift.MarkdownBlock) -> Swift.Bool
  public typealias ID = Swift.ObjectIdentifier
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
}
public class ImageBlock : AmplitudeEngagementSwift.ContentBlockProtocol {
  public var type: AmplitudeEngagementSwift.ContentBlockType
  final public let meta: AmplitudeEngagementSwift.ImageMeta
  public init(meta: AmplitudeEngagementSwift.ImageMeta)
  required public init(from decoder: any Swift.Decoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: AmplitudeEngagementSwift.ImageBlock, rhs: AmplitudeEngagementSwift.ImageBlock) -> Swift.Bool
  public typealias ID = Swift.ObjectIdentifier
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
}
public class VideoBlock : AmplitudeEngagementSwift.ContentBlockProtocol {
  public var type: AmplitudeEngagementSwift.ContentBlockType
  final public let meta: AmplitudeEngagementSwift.VideoMeta
  public init(meta: AmplitudeEngagementSwift.VideoMeta)
  required public init(from decoder: any Swift.Decoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: AmplitudeEngagementSwift.VideoBlock, rhs: AmplitudeEngagementSwift.VideoBlock) -> Swift.Bool
  public typealias ID = Swift.ObjectIdentifier
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
}
public class ButtonBlock : AmplitudeEngagementSwift.ContentBlockProtocol {
  public var type: AmplitudeEngagementSwift.ContentBlockType
  final public let meta: AmplitudeEngagementSwift.ButtonMeta
  public init(meta: AmplitudeEngagementSwift.ButtonMeta)
  required public init(from decoder: any Swift.Decoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: AmplitudeEngagementSwift.ButtonBlock, rhs: AmplitudeEngagementSwift.ButtonBlock) -> Swift.Bool
  public func willSnooze() -> Swift.Bool
  public func willGoBack() -> Swift.Bool
  public typealias ID = Swift.ObjectIdentifier
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
}
public class SurveyTextBlock : AmplitudeEngagementSwift.ContentBlockProtocol {
  public var type: AmplitudeEngagementSwift.ContentBlockType
  final public let uuid: Swift.String
  final public let meta: AmplitudeEngagementSwift.SurveyTextMeta
  public init(uuid: Swift.String, meta: AmplitudeEngagementSwift.SurveyTextMeta)
  required public init(from decoder: any Swift.Decoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: AmplitudeEngagementSwift.SurveyTextBlock, rhs: AmplitudeEngagementSwift.SurveyTextBlock) -> Swift.Bool
  public typealias ID = Swift.ObjectIdentifier
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
}
public class SurveyTextShortBlock : AmplitudeEngagementSwift.ContentBlockProtocol {
  public var type: AmplitudeEngagementSwift.ContentBlockType
  final public let uuid: Swift.String
  final public let meta: AmplitudeEngagementSwift.SurveyTextMeta
  public init(uuid: Swift.String, meta: AmplitudeEngagementSwift.SurveyTextMeta)
  required public init(from decoder: any Swift.Decoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: AmplitudeEngagementSwift.SurveyTextShortBlock, rhs: AmplitudeEngagementSwift.SurveyTextShortBlock) -> Swift.Bool
  public typealias ID = Swift.ObjectIdentifier
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
}
public class SurveyListBlock : AmplitudeEngagementSwift.ContentBlockProtocol {
  public var type: AmplitudeEngagementSwift.ContentBlockType
  final public let uuid: Swift.String
  final public let meta: AmplitudeEngagementSwift.SurveyListMeta
  public init(uuid: Swift.String, meta: AmplitudeEngagementSwift.SurveyListMeta)
  required public init(from decoder: any Swift.Decoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: AmplitudeEngagementSwift.SurveyListBlock, rhs: AmplitudeEngagementSwift.SurveyListBlock) -> Swift.Bool
  public typealias ID = Swift.ObjectIdentifier
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
}
public class SurveyRatingBlock : AmplitudeEngagementSwift.ContentBlockProtocol {
  public var type: AmplitudeEngagementSwift.ContentBlockType
  final public let uuid: Swift.String
  final public let meta: AmplitudeEngagementSwift.SurveyRatingMeta
  public init(uuid: Swift.String, meta: AmplitudeEngagementSwift.SurveyRatingMeta)
  required public init(from decoder: any Swift.Decoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: AmplitudeEngagementSwift.SurveyRatingBlock, rhs: AmplitudeEngagementSwift.SurveyRatingBlock) -> Swift.Bool
  public typealias ID = Swift.ObjectIdentifier
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
}
public enum ActionType : Swift.String, Swift.Codable {
  case noAction
  case click
  case link
  case openChat
  case dismiss
  case complete
  case snooze
  case nudge
  case goToStep
  case useConditionalLogic
  case stepBack
  case stepForward
  case callback
  case unknown
  public init(from decoder: any Swift.Decoder) throws
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum OpenChatActionType : Swift.String, Swift.Codable {
  case intercom
  case helpscout
  case freshdesk
  case freshchat
  case crisp
  case zendesk
  case liveChat
  case gist
  case olark
  case hubspot
  case drift
  case pylon
  case talkdesk_v2
  case zendesk_handoff
  case unknown
  public init(from decoder: any Swift.Decoder) throws
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum SnoozeInterval : Swift.String, Swift.Codable {
  case hour
  case day
  case week
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct OpenChatActionMeta : Swift.Codable, Swift.Hashable {
  public let type: AmplitudeEngagementSwift.OpenChatActionType
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: AmplitudeEngagementSwift.OpenChatActionMeta, b: AmplitudeEngagementSwift.OpenChatActionMeta) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct LinkActionMeta : Swift.Codable, Swift.Hashable {
  public let command: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: AmplitudeEngagementSwift.LinkActionMeta, b: AmplitudeEngagementSwift.LinkActionMeta) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct OffsetValue : Swift.Codable {
  public let x: Swift.String
  public let y: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol ActionProtocol : Swift.Decodable, Swift.Encodable {
  var type: AmplitudeEngagementSwift.ActionType { get }
}
public struct NoAction : AmplitudeEngagementSwift.ActionProtocol, Swift.Codable {
  public var type: AmplitudeEngagementSwift.ActionType
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ClickAction : AmplitudeEngagementSwift.ActionProtocol, Swift.Codable {
  public var type: AmplitudeEngagementSwift.ActionType
  public let value: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CallbackAction : AmplitudeEngagementSwift.ActionProtocol, Swift.Codable {
  public var type: AmplitudeEngagementSwift.ActionType
  public let value: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LinkOperation : Swift.String, Swift.Codable {
  case router
  case `self`
  case blank
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct LinkAction : AmplitudeEngagementSwift.ActionProtocol, Swift.Codable {
  public var type: AmplitudeEngagementSwift.ActionType
  public let value: Swift.String
  public let operation: AmplitudeEngagementSwift.LinkOperation?
  public let meta: AmplitudeEngagementSwift.LinkActionMeta?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct OpenChatAction : AmplitudeEngagementSwift.ActionProtocol, Swift.Codable, Swift.Hashable {
  public var type: AmplitudeEngagementSwift.ActionType
  public let meta: AmplitudeEngagementSwift.OpenChatActionMeta
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: AmplitudeEngagementSwift.OpenChatAction, rhs: AmplitudeEngagementSwift.OpenChatAction) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct DismissAction : AmplitudeEngagementSwift.ActionProtocol, Swift.Codable {
  public var type: AmplitudeEngagementSwift.ActionType
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CompleteAction : AmplitudeEngagementSwift.ActionProtocol, Swift.Codable {
  public var type: AmplitudeEngagementSwift.ActionType
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct SnoozeAction : AmplitudeEngagementSwift.ActionProtocol, Swift.Codable {
  public var type: AmplitudeEngagementSwift.ActionType
  public let interval: AmplitudeEngagementSwift.SnoozeInterval?
  public let value: Swift.Int?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct NudgeAction : AmplitudeEngagementSwift.ActionProtocol, Swift.Codable {
  public var type: AmplitudeEngagementSwift.ActionType
  public let value: Swift.Int
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct GoToNudgeStepAction : AmplitudeEngagementSwift.ActionProtocol, Swift.Codable {
  public var type: AmplitudeEngagementSwift.ActionType
  public let value: Swift.Int
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct UseConditionalLogicAction : AmplitudeEngagementSwift.ActionProtocol, Swift.Codable {
  public var type: AmplitudeEngagementSwift.ActionType
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct StepBackAction : AmplitudeEngagementSwift.ActionProtocol, Swift.Codable {
  public var type: AmplitudeEngagementSwift.ActionType
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct StepForwardAction : AmplitudeEngagementSwift.ActionProtocol, Swift.Codable {
  public var type: AmplitudeEngagementSwift.ActionType
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum OperatorType : Swift.String, Swift.Codable {
  case eq
  case neq
  case gt
  case lt
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum Action : Swift.Codable, Swift.Hashable {
  case noAction(AmplitudeEngagementSwift.NoAction)
  case click(AmplitudeEngagementSwift.ClickAction)
  case link(AmplitudeEngagementSwift.LinkAction)
  case openChat(AmplitudeEngagementSwift.OpenChatAction)
  case dismiss(AmplitudeEngagementSwift.DismissAction)
  case complete(AmplitudeEngagementSwift.CompleteAction)
  case snooze(AmplitudeEngagementSwift.SnoozeAction)
  case nudge(AmplitudeEngagementSwift.NudgeAction)
  case goToStep(AmplitudeEngagementSwift.GoToNudgeStepAction)
  case useConditionalLogic(AmplitudeEngagementSwift.UseConditionalLogicAction)
  case stepBack(AmplitudeEngagementSwift.StepBackAction)
  case stepForward(AmplitudeEngagementSwift.StepForwardAction)
  case callback(AmplitudeEngagementSwift.CallbackAction)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: AmplitudeEngagementSwift.Action, rhs: AmplitudeEngagementSwift.Action) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct ElementSelector : Swift.Codable {
  public let selector: Swift.String?
  public let text: Swift.String?
  public let tag: Swift.String
  public let attributes: [Swift.String : Swift.String]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NudgeStepLayout : Swift.String, Swift.Codable {
  case classic
  case horizontal
  case vertical
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum FormFactorType : Swift.String, Swift.Codable {
  case modal
  case popover
  case banner
  case pin
  case tooltip
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum PopoverPosition : Swift.String, Swift.Codable, Swift.CaseIterable {
  case topLeft
  case topRight
  case bottomRight
  case bottomLeft
  case center
  public init?(rawValue: Swift.String)
  public typealias AllCases = [AmplitudeEngagementSwift.PopoverPosition]
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [AmplitudeEngagementSwift.PopoverPosition] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public enum BannerPosition : Swift.String, Swift.Codable {
  case top
  case bottom
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum BannerPlacement : Swift.String, Swift.Codable {
  case `default`
  case overlay
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum PinPosition : Swift.String, Swift.Codable {
  case auto
  case top
  case bottom
  case left
  case right
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum PinAlignment : Swift.String, Swift.Codable {
  case center
  case top
  case bottom
  case left
  case right
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum TooltipShowOn : Swift.String, Swift.Codable {
  case hover
  case click
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum TooltipPointerType : Swift.String, Swift.Codable {
  case none
  case arrow
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct TooltipPointer : Swift.Codable {
  public let type: AmplitudeEngagementSwift.TooltipPointerType
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum MarkerType : Swift.String, Swift.Codable {
  case beacon
  case icon
  case image
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum IconType : Swift.String, Swift.Codable {
  case helpCircle
  case helpSquare
  case infoCircle
  case bookClosed
  case lightBulb
  case lightning
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum TooltipPosition : Swift.String, Swift.Codable {
  case left
  case right
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum MediaPosition : Swift.String, Swift.Codable {
  case left
  case right
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol FormFactorProtocol {
  var type: AmplitudeEngagementSwift.FormFactorType { get }
  var layout: AmplitudeEngagementSwift.NudgeStepLayout? { get }
  var textAnimation: Swift.String? { get }
  var mediaPosition: AmplitudeEngagementSwift.MediaPosition? { get }
}
public class AnyFormFactor : AmplitudeEngagementSwift.FormFactorProtocol, Swift.Codable {
  final public let type: AmplitudeEngagementSwift.FormFactorType
  public var layout: AmplitudeEngagementSwift.NudgeStepLayout?
  public var textAnimation: Swift.String?
  public var mediaPosition: AmplitudeEngagementSwift.MediaPosition?
  public init(type: AmplitudeEngagementSwift.FormFactorType, layout: AmplitudeEngagementSwift.NudgeStepLayout? = nil, textAnimation: Swift.String? = nil, mediaPosition: AmplitudeEngagementSwift.MediaPosition? = nil)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
public class ModalFormFactor : AmplitudeEngagementSwift.AnyFormFactor {
  final public let canClickOutsideToClose: Swift.Bool
  public init(canClickOutsideToClose: Swift.Bool = false, layout: AmplitudeEngagementSwift.NudgeStepLayout? = nil, mediaPosition: AmplitudeEngagementSwift.MediaPosition? = .right)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
public class PopoverFormFactor : AmplitudeEngagementSwift.AnyFormFactor {
  final public let position: AmplitudeEngagementSwift.PopoverPosition
  public init(position: AmplitudeEngagementSwift.PopoverPosition, layout: AmplitudeEngagementSwift.NudgeStepLayout? = nil, mediaPosition: AmplitudeEngagementSwift.MediaPosition? = .right)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
public class BannerFormFactor : AmplitudeEngagementSwift.AnyFormFactor {
  final public let position: AmplitudeEngagementSwift.BannerPosition
  final public let placement: AmplitudeEngagementSwift.BannerPlacement
  final public let sticky: Swift.Bool
  public init(position: AmplitudeEngagementSwift.BannerPosition, placement: AmplitudeEngagementSwift.BannerPlacement, sticky: Swift.Bool = false, layout: AmplitudeEngagementSwift.NudgeStepLayout? = .classic, mediaPosition: AmplitudeEngagementSwift.MediaPosition? = .right)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
public enum PinPointerType : Swift.String, Swift.Codable {
  case beacon
  case arrow
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct PinPointer : Swift.Codable {
  public let type: AmplitudeEngagementSwift.PinPointerType
  public init(type: AmplitudeEngagementSwift.PinPointerType)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public class PinFormFactor : AmplitudeEngagementSwift.AnyFormFactor {
  final public let anchor: Swift.String
  final public let anchorSelector: AmplitudeEngagementSwift.ElementSelector?
  final public let isOpenByDefault: Swift.Bool
  final public let isShowingMask: Swift.Bool
  final public let advanceTrigger: Swift.String?
  final public let offset: AmplitudeEngagementSwift.OffsetValue?
  final public let position: AmplitudeEngagementSwift.PinPosition
  final public let alignment: AmplitudeEngagementSwift.PinAlignment
  final public let pointer: AmplitudeEngagementSwift.PinPointer
  public init(anchor: Swift.String, anchorSelector: AmplitudeEngagementSwift.ElementSelector? = nil, isOpenByDefault: Swift.Bool = false, isShowingMask: Swift.Bool = false, advanceTrigger: Swift.String? = nil, offset: AmplitudeEngagementSwift.OffsetValue? = nil, position: AmplitudeEngagementSwift.PinPosition = .auto, alignment: AmplitudeEngagementSwift.PinAlignment = .center, pointer: AmplitudeEngagementSwift.PinPointer = PinPointer(type: .beacon), layout: AmplitudeEngagementSwift.NudgeStepLayout? = .classic, mediaPosition: AmplitudeEngagementSwift.MediaPosition? = .right)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
public class TooltipFormFactor : AmplitudeEngagementSwift.AnyFormFactor {
  final public let anchor: Swift.String
  final public let anchorSelector: AmplitudeEngagementSwift.ElementSelector?
  final public let showOn: AmplitudeEngagementSwift.TooltipShowOn
  final public let marker: AmplitudeEngagementSwift.MarkerContainer?
  final public let pointer: AmplitudeEngagementSwift.TooltipPointer?
  public init(anchor: Swift.String, anchorSelector: AmplitudeEngagementSwift.ElementSelector? = nil, showOn: AmplitudeEngagementSwift.TooltipShowOn, marker: AmplitudeEngagementSwift.MarkerContainer? = nil, pointer: AmplitudeEngagementSwift.TooltipPointer? = nil, layout: AmplitudeEngagementSwift.NudgeStepLayout? = nil, mediaPosition: AmplitudeEngagementSwift.MediaPosition? = .right)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
public enum FormFactor : Swift.Codable {
  case modal(AmplitudeEngagementSwift.ModalFormFactor)
  case popover(AmplitudeEngagementSwift.PopoverFormFactor)
  case banner(AmplitudeEngagementSwift.BannerFormFactor)
  case pin(AmplitudeEngagementSwift.PinFormFactor)
  case tooltip(AmplitudeEngagementSwift.TooltipFormFactor)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct MarkerPositioning : Swift.Codable {
  public let position: AmplitudeEngagementSwift.TooltipPosition
  public let offset: AmplitudeEngagementSwift.OffsetValue
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol Marker : Swift.Decodable, Swift.Encodable {
  var type: AmplitudeEngagementSwift.MarkerType { get }
  var positioning: AmplitudeEngagementSwift.MarkerPositioning { get }
}
public struct BeaconMarker : AmplitudeEngagementSwift.Marker {
  public var type: AmplitudeEngagementSwift.MarkerType
  public let positioning: AmplitudeEngagementSwift.MarkerPositioning
  public init(positioning: AmplitudeEngagementSwift.MarkerPositioning)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct IconMarker : AmplitudeEngagementSwift.Marker {
  public var type: AmplitudeEngagementSwift.MarkerType
  public let icon: AmplitudeEngagementSwift.IconType
  public let positioning: AmplitudeEngagementSwift.MarkerPositioning
  public init(icon: AmplitudeEngagementSwift.IconType, positioning: AmplitudeEngagementSwift.MarkerPositioning)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ImageMarker : AmplitudeEngagementSwift.Marker {
  public var type: AmplitudeEngagementSwift.MarkerType
  public let source: Swift.String
  public let positioning: AmplitudeEngagementSwift.MarkerPositioning
  public init(source: Swift.String, positioning: AmplitudeEngagementSwift.MarkerPositioning)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct MarkerContainer : Swift.Codable {
  public let marker: any AmplitudeEngagementSwift.Marker
  public init(_ marker: any AmplitudeEngagementSwift.Marker)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public var asBeacon: AmplitudeEngagementSwift.BeaconMarker? {
    get
  }
  public var asIcon: AmplitudeEngagementSwift.IconMarker? {
    get
  }
  public var asImage: AmplitudeEngagementSwift.ImageMarker? {
    get
  }
}
public struct AnyGoal : Swift.Codable {
  public let goal: Any?
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public enum GoalType : Swift.String, Swift.Codable {
  case page_visited
  case element_clicked
  case cta_clicked
  case event_tracked
  case unknown
  public init(from decoder: any Swift.Decoder) throws
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct PageVisitedGoal : Swift.Codable {
  public var type: AmplitudeEngagementSwift.GoalType
  public let value: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ElementClickedGoal : Swift.Codable {
  public var type: AmplitudeEngagementSwift.GoalType
  public let value: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CTAClickedGoal : Swift.Codable {
  public var type: AmplitudeEngagementSwift.GoalType
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct EventTrackedGoal : Swift.Codable {
  public var type: AmplitudeEngagementSwift.GoalType
  public let event: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ContentBlockMeta : Swift.Codable {
  case markdown(AmplitudeEngagementSwift.MarkdownMeta)
  case image(AmplitudeEngagementSwift.ImageMeta)
  case video(AmplitudeEngagementSwift.VideoMeta)
  case button(AmplitudeEngagementSwift.ButtonMeta)
  case survey_text(AmplitudeEngagementSwift.SurveyTextMeta)
  case survey_text_short(AmplitudeEngagementSwift.SurveyTextMeta)
  case survey_rating(AmplitudeEngagementSwift.SurveyRatingMeta)
  case survey_list(AmplitudeEngagementSwift.SurveyListMeta)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ContentBlock : Swift.Codable {
  case markdown(AmplitudeEngagementSwift.MarkdownBlock)
  case image(AmplitudeEngagementSwift.ImageBlock)
  case video(AmplitudeEngagementSwift.VideoBlock)
  case button(AmplitudeEngagementSwift.ButtonBlock)
  case survey_text(AmplitudeEngagementSwift.SurveyTextBlock)
  case survey_text_short(AmplitudeEngagementSwift.SurveyTextShortBlock)
  case survey_rating(AmplitudeEngagementSwift.SurveyRatingBlock)
  case survey_list(AmplitudeEngagementSwift.SurveyListBlock)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct NudgeStep : Swift.Codable {
  public let id: Swift.Int
  public let title: Swift.String
  public let content: [AmplitudeEngagementSwift.ContentBlock]
  public let formFactor: AmplitudeEngagementSwift.FormFactor
  public let goal: AmplitudeEngagementSwift.AnyGoal?
  public var hasMediaContent: Swift.Bool {
    get
  }
  public func isSurveyResponseRequired() -> Swift.Bool
  public func getValidationMessage() -> Swift.String?
  public func findSurveyBlock() -> AmplitudeEngagementSwift.ContentBlock?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct EvaluationCondition : Swift.Codable {
  public let selector: [Swift.String]
  public let op: Swift.String
  public let values: [Swift.String]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct NudgeConditionalAction : Swift.Codable, Swift.Hashable {
  public let `operator`: AmplitudeEngagementSwift.OperatorType
  public let operand: AmplitudeEngagementSwift.AnyCodable
  public let action: AmplitudeEngagementSwift.Action
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: AmplitudeEngagementSwift.NudgeConditionalAction, b: AmplitudeEngagementSwift.NudgeConditionalAction) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public enum MatchType : Swift.String, Swift.Codable {
  case contains
  case endsWith
  case exact
  case pattern
  case regex
  case simple
  case startsWith
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct PageTargetingConfig : Swift.Codable {
  public struct Config : Swift.Codable, Swift.Identifiable {
    public let isExclude: Swift.Bool
    public let matchType: AmplitudeEngagementSwift.MatchType
    public let url: Swift.String
    public var id: Swift.String {
      get
    }
    public typealias ID = Swift.String
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public let conditions: [[AmplitudeEngagementSwift.EvaluationCondition]]
  public let configs: [AmplitudeEngagementSwift.PageTargetingConfig.Config]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NudgeType : Swift.String, Swift.Codable {
  case survey
  case tour
  case banner
  case tooltip
  case checklist
  case custom
  public init(from decoder: any Swift.Decoder) throws
  public var capitalized: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum NudgePosition : Swift.String, Swift.Codable {
  case bottomRight
  case bottomLeft
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct SnoozeDuration : Swift.Codable {
  public let interval: AmplitudeEngagementSwift.SnoozeInterval
  public let value: Swift.Int
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct NudgeCooldownLimit : Swift.Codable {
  public let max: Swift.Int?
  public let period: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct NudgeLifecycleConfig : Swift.Codable {
  public let stopShowingIfCompleted: Swift.Bool
  public let stopShowingIfDismissed: Swift.Bool
  public let cooldownLimits: [AmplitudeEngagementSwift.NudgeCooldownLimit]
  public let conditions: [[AmplitudeEngagementSwift.EvaluationCondition]]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum StepCounterFormat : Swift.String, Swift.Codable {
  case numeric
  case verbose
  case dots
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct Nudge : Swift.Codable {
  public let title: Swift.String
  public let variantId: Swift.Int
  public let steps: [AmplitudeEngagementSwift.NudgeStep]
  public let flagKey: Swift.String
  public var triggerConfig: AmplitudeEngagementSwift.NudgeTriggerConfig?
  public var lifecycleConfig: AmplitudeEngagementSwift.NudgeLifecycleConfig?
  public var pageTargeting: AmplitudeEngagementSwift.PageTargetingConfig?
  public var temporarilyHideTargeting: AmplitudeEngagementSwift.PageTargetingConfig?
  public var archived: Swift.Bool?
  public var position: AmplitudeEngagementSwift.NudgePosition?
  public var priority: Swift.Int?
  public let showStepCounter: Swift.Bool
  public var stepCounterFormat: AmplitudeEngagementSwift.StepCounterFormat
  public let isDismissible: Swift.Bool
  public let isSnoozable: Swift.Bool
  public let snoozeLabel: Swift.String
  public let type: AmplitudeEngagementSwift.NudgeType
  public let customThemeId: Swift.Int?
  public let variant: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension AmplitudeEngagementSwift.Nudge {
  public init?(from dictionary: [Swift.String : Any]?) throws
  public init?(from string: Swift.String?) throws
}
public struct SurveyValidation : Swift.Codable {
  public struct RequiredConfig : Swift.Codable, Swift.Hashable {
    public let value: Swift.Bool
    public let message: Swift.String?
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: AmplitudeEngagementSwift.SurveyValidation.RequiredConfig, b: AmplitudeEngagementSwift.SurveyValidation.RequiredConfig) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct ValidationConfig : Swift.Codable, Swift.Hashable {
    public let required: AmplitudeEngagementSwift.SurveyValidation.RequiredConfig
    public init(required: Swift.Bool = false, message: Swift.String? = nil)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: AmplitudeEngagementSwift.SurveyValidation.ValidationConfig, b: AmplitudeEngagementSwift.SurveyValidation.ValidationConfig) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum SurveyRatingType : Swift.String, Swift.Codable {
  case emojis
  case numbers
  case stars
  case nps
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct ThrottleLimit : Swift.Codable, Swift.Hashable {
  public let max: Swift.Int?
  public let period: Swift.String?
  public let enabled: Swift.Bool?
  public init(max: Swift.Int, period: Swift.String, enabled: Swift.Bool? = nil)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: AmplitudeEngagementSwift.ThrottleLimit, b: AmplitudeEngagementSwift.ThrottleLimit) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct SimulationContext : Swift.Codable {
  public let lastTriggerEvent: AmplitudeEngagementSwift.TriggerEvent?
  public let simulatedNudge: AmplitudeEngagementSwift.Nudge
  public let lastEvent: AmplitudeEngagementSwift.LastEvent?
  public let currentStepIndex: Swift.Int
  public let passesCooldown: Swift.Bool
  public let passesSnoozedConditions: Swift.Bool
  public let passesPageTargeting: Swift.Bool
  public let passesPinnedElement: Swift.Bool
  public let shouldTemporarilyHide: Swift.Bool
  public let passesTriggerMatch: Swift.Bool
  public let passesClickedElement: Swift.Bool
  public let isAnchorableStep: Swift.Bool
  public let passesCustomThrottles: Swift.Bool
  public let surveyThrottleLimit: AmplitudeEngagementSwift.ThrottleLimit?
  public let guideThrottleLimit: AmplitudeEngagementSwift.ThrottleLimit?
  public let bypassCustomThrottles: Swift.Bool
  public let screen: Swift.String
  public let endUser: AmplitudeEngagementSwift.EndUser
  public init?(from dictionary: [Swift.String : Any]?) throws
  public init?(from string: Swift.String?) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct TriggerEvent : Swift.Codable {
  public let type: Swift.String
  public let nudgeId: Swift.Int?
  public let trigger: AmplitudeEngagementSwift.Trigger
  public let source: AmplitudeEngagementSwift.TriggerSource
  public let overrides: AmplitudeEngagementSwift.TriggerEventOverrides?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct TriggerEventPayload : Swift.Codable {
  public var nudgeId: Swift.Int?
  public var trigger: AmplitudeEngagementSwift.Trigger?
  public let source: AmplitudeEngagementSwift.TriggerSource
  public var overrides: AmplitudeEngagementSwift.TriggerEventOverrides?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Trigger : Swift.Codable {
  public let type: AmplitudeEngagementSwift.TriggerType
  public var data: AmplitudeEngagementSwift.TriggerData?
  public init(type: AmplitudeEngagementSwift.TriggerType, data: AmplitudeEngagementSwift.TriggerData? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum TriggerType : Swift.String, Swift.Codable {
  case analyticsEvent
  case elementAppeared
  case elementClicked
  case afterTime
  case direct
  case immediately
  case active
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct TriggerData : Swift.Codable {
  public let event: Swift.String?
  public let properties: [Swift.String : AmplitudeEngagementSwift.AnyCodable]
  public init(event: Swift.String? = nil, properties: [Swift.String : AmplitudeEngagementSwift.AnyCodable] = [:])
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct TriggerEventOverrides : Swift.Codable {
  public let triggerFilters: Swift.Bool?
  public init(triggerFilters: Swift.Bool? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct TriggerSource : Swift.Codable {
  public let type: AmplitudeEngagementSwift.TriggerSourceType
  public let properties: AmplitudeEngagementSwift.TriggerSourceProperties?
  public init(type: AmplitudeEngagementSwift.TriggerSourceType, properties: AmplitudeEngagementSwift.TriggerSourceProperties? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum TriggerSourceType : Swift.String, Swift.Codable {
  case trigger
  case debug
  case active
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct TriggerSourceProperties : Swift.Codable {
  public let triggerType: AmplitudeEngagementSwift.TriggerType?
  public init(triggerType: AmplitudeEngagementSwift.TriggerType? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct LastEvent : Swift.Codable {
  public let type: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum SimpleNudgeTriggerType : Swift.String, Swift.Codable {
  case immediately
  case smart_delay
  case rage_click
  case user_confusion
  case none
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct ElementAppearedTriggerConfig : Swift.Codable {
  public let type: Swift.String
  public let data: AmplitudeEngagementSwift.ElementAppearedData
  public let conditions: [[AmplitudeEngagementSwift.EvaluationCondition]]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ElementAppearedData : Swift.Codable {
  public let selector: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ElementClickedTriggerConfig : Swift.Codable {
  public let type: Swift.String
  public let data: AmplitudeEngagementSwift.ElementClickedData
  public let conditions: [[AmplitudeEngagementSwift.EvaluationCondition]]?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ElementClickedData : Swift.Codable {
  public let selector: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct EventTriggerConfig : Swift.Codable {
  public let type: Swift.String
  public let data: AmplitudeEngagementSwift.EventData
  public let conditions: [[AmplitudeEngagementSwift.EvaluationCondition]]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct EventData : Swift.Codable {
  public let event: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AfterTimeTriggerConfig : Swift.Codable {
  public let type: Swift.String
  public let data: AmplitudeEngagementSwift.AfterTimeData
  public let conditions: [[AmplitudeEngagementSwift.EvaluationCondition]]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AfterTimeData : Swift.Codable {
  public let unit: Swift.String
  public let value: Swift.Int
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct SimpleTriggerConfig : Swift.Codable {
  public let type: AmplitudeEngagementSwift.SimpleNudgeTriggerType
  public let conditions: [[AmplitudeEngagementSwift.EvaluationCondition]]
  public let data: AmplitudeEngagementSwift.AnyCodable?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NudgeTriggerConfig : Swift.Codable {
  case simple(AmplitudeEngagementSwift.SimpleTriggerConfig)
  case elementAppeared(AmplitudeEngagementSwift.ElementAppearedTriggerConfig)
  case elementClicked(AmplitudeEngagementSwift.ElementClickedTriggerConfig)
  case event(AmplitudeEngagementSwift.EventTriggerConfig)
  case afterTime(AmplitudeEngagementSwift.AfterTimeTriggerConfig)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct EndUser : Swift.Codable {
  public let userId: Swift.String?
  public let deviceId: Swift.String?
  public let country: Swift.String?
  public let city: Swift.String?
  public let region: Swift.String?
  public let dma: Swift.String?
  public let language: Swift.String?
  public let platform: Swift.String?
  public let version: Swift.String?
  public let os: Swift.String?
  public let deviceModel: Swift.String?
  public let carrier: Swift.String?
  public let library: Swift.String?
  public let userAgent: Swift.String?
  public let sessionId: Swift.Int?
  public let userProperties: [Swift.String : AmplitudeEngagementSwift.AnyCodable]?
  public init?(from dictionary: [Swift.String : Any]?) throws
  public init?(from string: Swift.String?) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension AmplitudeEngagementSwift.LinkAction : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension AmplitudeEngagementSwift.ButtonMeta : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
public enum GuideOrSurveyStatus : Swift.String, Swift.Codable {
  case visible
  case active
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct GuideOrSurvey : Swift.Codable, Swift.Identifiable {
  public var id: Swift.Int
  public var status: AmplitudeEngagementSwift.GuideOrSurveyStatus
  public var step: Swift.Int
  public var title: Swift.String
  public typealias ID = Swift.Int
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AnyCodable : Swift.Codable, Swift.Hashable {
  public let value: Any
  public init(_ value: Any)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: AmplitudeEngagementSwift.AnyCodable, rhs: AmplitudeEngagementSwift.AnyCodable) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum AmplitudeLogLevel : Swift.Int, Swift.Codable {
  case verbose
  case debug
  case warn
  case error
  case none
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public protocol AmplitudeLogger {
  func disable()
  func enable(logLevel: AmplitudeEngagementSwift.AmplitudeLogLevel)
  func log(_ args: Any...)
  func warn(_ args: Any...)
  func error(_ args: Any...)
  func debug(_ args: Any...)
}
public enum DebugStatus {
  case success
  case warning
  case error
  case info
  public static func == (a: AmplitudeEngagementSwift.DebugStatus, b: AmplitudeEngagementSwift.DebugStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func amplitudeView(_ identifier: Swift.String) -> some SwiftUICore.View
  
}


@_inheritsConvenienceInitializers public class __ReactNative__AESDK : AmplitudeEngagementSwift.AmplitudeEngagement {
  override public init(_ apiKey: Swift.String, _ options: AmplitudeEngagementSwift.AmplitudeInitOptions = super)
  @objc deinit
}
public class AmplitudeEngagement : Observation.Observable {
  public var config: AmplitudeEngagementSwift.AmplitudeEngagementConfig
  public static var logger: any AmplitudeEngagementSwift.AmplitudeLogger
  public init(_ apiKey: Swift.String, _ options: AmplitudeEngagementSwift.AmplitudeInitOptions = AmplitudeInitOptions())
  public func getPlugin() -> any AmplitudeCore.UniversalPlugin
  public func boot(_ user_id: Swift.String, device_id: Swift.String? = nil)
  public func boot(options: AmplitudeEngagementSwift.AmplitudeBootOptions)
  public func setThemeMode(themeMode: AmplitudeEngagementSwift.ThemeMode)
  public func reset(key: Swift.String, stepIndex: Swift.Int = 0)
  public func list() -> [AmplitudeEngagementSwift.GuideOrSurvey]
  public func show(key: Swift.String, stepIndex: Swift.Int = 0)
  public func screen(_ screenName: Swift.String)
  public func closeAll()
  public func forwardEvent(_ eventProperties: [Swift.String : Any])
  public func addCallback(_ key: Swift.String, _ function: @escaping () -> Swift.Void)
  public func handleUrl(_ url: Foundation.URL) -> Swift.Bool
  @objc deinit
}
public struct AmplitudeEndUser {
  public var user_id: Swift.String?
  public var device_id: Swift.String?
  public var user_properties: [Swift.String : Any]
  public init(user_id: Swift.String? = nil, device_id: Swift.String? = nil, user_properties: [Swift.String : Any] = [:])
}
public struct AmplitudeBootOptions {
  public init(user_id: Swift.String?, device_id: Swift.String? = nil, integrations: [(_ eventType: Swift.String, _ eventProperties: [Swift.String : Any]) -> Swift.Void] = [], user_properties: [Swift.String : Any] = [:])
  public init(user: AmplitudeEngagementSwift.AmplitudeEndUser, integrations: [(_ eventType: Swift.String, _ eventProperties: [Swift.String : Any]) -> Swift.Void] = [])
}
public enum Roboto : Swift.String, Swift.CaseIterable {
  case thin
  case bold
  case light
  case black
  case medium
  case regular
  public init?(rawValue: Swift.String)
  public typealias AllCases = [AmplitudeEngagementSwift.Roboto]
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [AmplitudeEngagementSwift.Roboto] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
extension SwiftUICore.Font {
  public static func roboto(_ roboto: AmplitudeEngagementSwift.Roboto, size: CoreFoundation.CGFloat) -> SwiftUICore.Font
}
public struct RobotoFont {
  public static func registerFonts()
}
public enum AmplitudeServerZone : Swift.String, Swift.Codable {
  case EU
  case US
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct AmplitudeInitOptions : Swift.Codable {
  public func toString() -> Swift.String
  public init(serverZone: AmplitudeEngagementSwift.AmplitudeServerZone? = nil, locale: Swift.String? = nil, logLevel: AmplitudeEngagementSwift.AmplitudeLogLevel? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AmplitudeEngagementConfig {
}
extension AmplitudeEngagementSwift.ThemeMode : Swift.Equatable {}
extension AmplitudeEngagementSwift.ThemeMode : Swift.Hashable {}
extension AmplitudeEngagementSwift.ThemeMode : Swift.RawRepresentable {}
extension AmplitudeEngagementSwift.ContentBlockType : Swift.Equatable {}
extension AmplitudeEngagementSwift.ContentBlockType : Swift.Hashable {}
extension AmplitudeEngagementSwift.ContentBlockType : Swift.RawRepresentable {}
extension AmplitudeEngagementSwift.ButtonType : Swift.Equatable {}
extension AmplitudeEngagementSwift.ButtonType : Swift.Hashable {}
extension AmplitudeEngagementSwift.ButtonType : Swift.RawRepresentable {}
extension AmplitudeEngagementSwift.ActionType : Swift.Equatable {}
extension AmplitudeEngagementSwift.ActionType : Swift.Hashable {}
extension AmplitudeEngagementSwift.ActionType : Swift.RawRepresentable {}
extension AmplitudeEngagementSwift.OpenChatActionType : Swift.Equatable {}
extension AmplitudeEngagementSwift.OpenChatActionType : Swift.Hashable {}
extension AmplitudeEngagementSwift.OpenChatActionType : Swift.RawRepresentable {}
extension AmplitudeEngagementSwift.SnoozeInterval : Swift.Equatable {}
extension AmplitudeEngagementSwift.SnoozeInterval : Swift.Hashable {}
extension AmplitudeEngagementSwift.SnoozeInterval : Swift.RawRepresentable {}
extension AmplitudeEngagementSwift.LinkOperation : Swift.Equatable {}
extension AmplitudeEngagementSwift.LinkOperation : Swift.Hashable {}
extension AmplitudeEngagementSwift.LinkOperation : Swift.RawRepresentable {}
extension AmplitudeEngagementSwift.OperatorType : Swift.Equatable {}
extension AmplitudeEngagementSwift.OperatorType : Swift.Hashable {}
extension AmplitudeEngagementSwift.OperatorType : Swift.RawRepresentable {}
extension AmplitudeEngagementSwift.NudgeStepLayout : Swift.Equatable {}
extension AmplitudeEngagementSwift.NudgeStepLayout : Swift.Hashable {}
extension AmplitudeEngagementSwift.NudgeStepLayout : Swift.RawRepresentable {}
extension AmplitudeEngagementSwift.FormFactorType : Swift.Equatable {}
extension AmplitudeEngagementSwift.FormFactorType : Swift.Hashable {}
extension AmplitudeEngagementSwift.FormFactorType : Swift.RawRepresentable {}
extension AmplitudeEngagementSwift.PopoverPosition : Swift.Equatable {}
extension AmplitudeEngagementSwift.PopoverPosition : Swift.Hashable {}
extension AmplitudeEngagementSwift.PopoverPosition : Swift.RawRepresentable {}
extension AmplitudeEngagementSwift.BannerPosition : Swift.Equatable {}
extension AmplitudeEngagementSwift.BannerPosition : Swift.Hashable {}
extension AmplitudeEngagementSwift.BannerPosition : Swift.RawRepresentable {}
extension AmplitudeEngagementSwift.BannerPlacement : Swift.Equatable {}
extension AmplitudeEngagementSwift.BannerPlacement : Swift.Hashable {}
extension AmplitudeEngagementSwift.BannerPlacement : Swift.RawRepresentable {}
extension AmplitudeEngagementSwift.PinPosition : Swift.Equatable {}
extension AmplitudeEngagementSwift.PinPosition : Swift.Hashable {}
extension AmplitudeEngagementSwift.PinPosition : Swift.RawRepresentable {}
extension AmplitudeEngagementSwift.PinAlignment : Swift.Equatable {}
extension AmplitudeEngagementSwift.PinAlignment : Swift.Hashable {}
extension AmplitudeEngagementSwift.PinAlignment : Swift.RawRepresentable {}
extension AmplitudeEngagementSwift.TooltipShowOn : Swift.Equatable {}
extension AmplitudeEngagementSwift.TooltipShowOn : Swift.Hashable {}
extension AmplitudeEngagementSwift.TooltipShowOn : Swift.RawRepresentable {}
extension AmplitudeEngagementSwift.TooltipPointerType : Swift.Equatable {}
extension AmplitudeEngagementSwift.TooltipPointerType : Swift.Hashable {}
extension AmplitudeEngagementSwift.TooltipPointerType : Swift.RawRepresentable {}
extension AmplitudeEngagementSwift.MarkerType : Swift.Equatable {}
extension AmplitudeEngagementSwift.MarkerType : Swift.Hashable {}
extension AmplitudeEngagementSwift.MarkerType : Swift.RawRepresentable {}
extension AmplitudeEngagementSwift.IconType : Swift.Equatable {}
extension AmplitudeEngagementSwift.IconType : Swift.Hashable {}
extension AmplitudeEngagementSwift.IconType : Swift.RawRepresentable {}
extension AmplitudeEngagementSwift.TooltipPosition : Swift.Equatable {}
extension AmplitudeEngagementSwift.TooltipPosition : Swift.Hashable {}
extension AmplitudeEngagementSwift.TooltipPosition : Swift.RawRepresentable {}
extension AmplitudeEngagementSwift.MediaPosition : Swift.Equatable {}
extension AmplitudeEngagementSwift.MediaPosition : Swift.Hashable {}
extension AmplitudeEngagementSwift.MediaPosition : Swift.RawRepresentable {}
extension AmplitudeEngagementSwift.PinPointerType : Swift.Equatable {}
extension AmplitudeEngagementSwift.PinPointerType : Swift.Hashable {}
extension AmplitudeEngagementSwift.PinPointerType : Swift.RawRepresentable {}
extension AmplitudeEngagementSwift.GoalType : Swift.Equatable {}
extension AmplitudeEngagementSwift.GoalType : Swift.Hashable {}
extension AmplitudeEngagementSwift.GoalType : Swift.RawRepresentable {}
extension AmplitudeEngagementSwift.MatchType : Swift.Equatable {}
extension AmplitudeEngagementSwift.MatchType : Swift.Hashable {}
extension AmplitudeEngagementSwift.MatchType : Swift.RawRepresentable {}
extension AmplitudeEngagementSwift.NudgeType : Swift.Equatable {}
extension AmplitudeEngagementSwift.NudgeType : Swift.Hashable {}
extension AmplitudeEngagementSwift.NudgeType : Swift.RawRepresentable {}
extension AmplitudeEngagementSwift.NudgePosition : Swift.Equatable {}
extension AmplitudeEngagementSwift.NudgePosition : Swift.Hashable {}
extension AmplitudeEngagementSwift.NudgePosition : Swift.RawRepresentable {}
extension AmplitudeEngagementSwift.StepCounterFormat : Swift.Equatable {}
extension AmplitudeEngagementSwift.StepCounterFormat : Swift.Hashable {}
extension AmplitudeEngagementSwift.StepCounterFormat : Swift.RawRepresentable {}
extension AmplitudeEngagementSwift.SurveyRatingType : Swift.Equatable {}
extension AmplitudeEngagementSwift.SurveyRatingType : Swift.Hashable {}
extension AmplitudeEngagementSwift.SurveyRatingType : Swift.RawRepresentable {}
extension AmplitudeEngagementSwift.TriggerType : Swift.Equatable {}
extension AmplitudeEngagementSwift.TriggerType : Swift.Hashable {}
extension AmplitudeEngagementSwift.TriggerType : Swift.RawRepresentable {}
extension AmplitudeEngagementSwift.TriggerSourceType : Swift.Equatable {}
extension AmplitudeEngagementSwift.TriggerSourceType : Swift.Hashable {}
extension AmplitudeEngagementSwift.TriggerSourceType : Swift.RawRepresentable {}
extension AmplitudeEngagementSwift.SimpleNudgeTriggerType : Swift.Equatable {}
extension AmplitudeEngagementSwift.SimpleNudgeTriggerType : Swift.Hashable {}
extension AmplitudeEngagementSwift.SimpleNudgeTriggerType : Swift.RawRepresentable {}
extension AmplitudeEngagementSwift.GuideOrSurveyStatus : Swift.Equatable {}
extension AmplitudeEngagementSwift.GuideOrSurveyStatus : Swift.Hashable {}
extension AmplitudeEngagementSwift.GuideOrSurveyStatus : Swift.RawRepresentable {}
extension AmplitudeEngagementSwift.AmplitudeLogLevel : Swift.Equatable {}
extension AmplitudeEngagementSwift.AmplitudeLogLevel : Swift.Hashable {}
extension AmplitudeEngagementSwift.AmplitudeLogLevel : Swift.RawRepresentable {}
extension AmplitudeEngagementSwift.DebugStatus : Swift.Equatable {}
extension AmplitudeEngagementSwift.DebugStatus : Swift.Hashable {}
extension AmplitudeEngagementSwift.Roboto : Swift.Equatable {}
extension AmplitudeEngagementSwift.Roboto : Swift.Hashable {}
extension AmplitudeEngagementSwift.Roboto : Swift.RawRepresentable {}
extension AmplitudeEngagementSwift.AmplitudeServerZone : Swift.Equatable {}
extension AmplitudeEngagementSwift.AmplitudeServerZone : Swift.Hashable {}
extension AmplitudeEngagementSwift.AmplitudeServerZone : Swift.RawRepresentable {}
